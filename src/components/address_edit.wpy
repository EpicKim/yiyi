<style lang="less">
.block {
  background: #fff;
}

.list_item {
  display: flex;
  align-items: center;
  border-top: 1px solid #efefef;
  padding: 35rpx 20rpx;
  .title {
    margin-right: 20rpx;
  }
  .input {
    flex: 1;
    input {
      color: #333;
    }
  }
}

.btn_box {
  margin-top: 64rpx;
  padding: 0 24rpx;
}

</style>
<template>
  <form bindsubmit="formSubmit">
    <view class="block">
      <view class="list_item">
        <view class="title">收货人姓名:</view>
        <view class="input">
          <input type="text" name="receiverName" value="{{editInfo.info.receiver}}">
        </view>
      </view>
      <view class="list_item">
        <view class="title">联系电话:</view>
        <view class="input">
          <input type="text" name="mobile" value="{{editInfo.info.mobile}}">
        </view>
      </view>
      <view class="list_item">
        <view class="title">所在地区:</view>
        <view class="input">
          <view @tap="openAddressPicker">{{province ? province.name : '省'}} - {{city ? city.name : '市' }} - {{area ? area.name : '区' }}</view>
          <areaPicker @areaArray.user="areaPickerArray"></areaPicker>
        </view>
      </view>
      <view class="list_item">
        <view class="title">详细地址:</view>
        <view class="input">
          <input type="text" name="addressDetail" value="{{editInfo.info.detail}}">
        </view>
      </view>
      <view class="list_item">
        <view class="title">设置默认地址:</view>
        <view class="input tr" @tap="changeCheckBoxState">
          <icon type="success" size="20" color="{{isDefult? 'red':'#999'}}" />
        </view>
      </view>
    </view>
    <view class="btn_box">
      <button class="button type_red" formType="submit">修改</button>
    </view>
  </form>
</template>
<script>
import wepy from 'wepy'
import tip from '../utils/tip'
import api from "../api/api"
import {
  USER_SPECICAL_INFO,
  ADDRESS
} from '../utils/constant';
import AreaPicker from "./common/wepy-area-picker"
export default class AddressEdit extends wepy.component {

  data = {
    isDefult: false,
    isCheck: false,
    editInfo: {
      default: {},
      type: Object
    },
    id: '',
    province: '',
    city: '',
    area: '',
    provinceCode: '',
    cityCode: '',
    areaCode: ''
  }

  components = {
    areaPicker: AreaPicker
  }

  //更新地址信息
  async editAddress(address) {

    let that = this;
    let addr=wx.getStorageSync(ADDRESS) || [];
    if(addr.length<=0){
      tip.error('地址更新失败');
      return false;
    }
    
    if(that.id == undefined || that.id === ''){
      tip.error('地址更新失败');
      return false;
    }
    //若勾选默认地址,则将所有的默认全部取消
    if(that.isDefult){
      for(var i=0;i<addr.length;i++){
        if(addr[i].is_default){
          addr[i].is_default=false;
        }
      }
    }
    let obj={
      province:that.province,
      city:that.city,
      area:that.area,
      is_default:that.isDefult,
      info:{
        receiver:address.receiverName,
        mobile:address.mobile,
        detail:address.addressDetail
      }
    }
    addr[that.id]=obj;

    try{
      wx.setStorageSync(ADDRESS,addr);
      //0 列表 1新增 2编辑 (显示列表)
      this.$emit('currentPage', 0);
      this.$emit('refreshAddList', 'hehe');

    }catch(e){
      tip.error('更新地址失败');
    }
    that.showLoading = false;
  }
  methods = {
    changeCheckBoxState() {
      this.isCheck = !this.isCheck;
      this.isDefult = !this.isDefult;
    },
    formSubmit(e) {

      let receiverName = e.detail.value.receiverName;
      let mobile = e.detail.value.mobile;
      let addressDetail = e.detail.value.addressDetail;

      if (receiverName == "") {
        tip.alert("输入收件人姓名");
        return false;
      }
      if (mobile == "") {
        tip.alert("输入联系电话");
        return false;

      }
      if (addressDetail == "") {
        tip.alert("输入详细地址");
        return false;
      }
      if(!this.province || !this.city || !this.area){
        tip.alert("选择省市区");
        return false;
      }
      //编辑地址
      this.editAddress(e.detail.value);
    },
    //该方法由编辑按钮触发
    refresh(val,index) {
      if (val == undefined) return;
      this.editInfo = val;
      if (index == undefined) return;
      this.id = index;
      if(val.is_default==true){
        this.isDefult=true
      }else{
        this.isDefult=false
      }
      this.province = { code: this.editInfo.province.code, name: this.editInfo.province.name };
      this.city = { code: this.editInfo.city.code, name:this.editInfo.city.name };
      this.area = { code: this.editInfo.area.code, name: this.editInfo.area.name };

      this.$apply();
    },
    openAddressPicker() {
      this.$invoke('areaPicker', 'openAddressPicker');
    },
    areaPickerArray(province, city, area) {
      this.province = province;
      this.city = city;
      this.area = area;

      this.provinceCode = province.code;
      this.cityCode = city.code;
      this.areaCode = area.code;
      this.$apply();
    }
  }

  onShow() {
    console.log("========editInfo==========");

    this.province = { code: '120000', name: '天津市' };
    this.city = { code: '120100', name: '天津市' };
    this.area = { code: '120101', name: '和平区' };
    this.$invoke('areaPicker', 'setAddressPickerValue', this.province, this.city, this.area);


  }
}

</script>
