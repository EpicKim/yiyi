<!--确认订单-->
<template>
  <view class="comfire_order">
    <view class="address" @tap="setAddress">
      <view class="empty_address" wx:if="{{!is_exit_address}}">
        <view class="title">设置收货地址</view>
        <view class="arrow">&gt;</view>
      </view>
      <view class="address_info" wx:else>
        <view class="title">
          <view class="user_info">
            <text class="name">{{address.info.receiver}}</text>
            <text class="phone">{{address.info.mobile}}</text>
          </view>
          <view class="active_address">
            <text class="defult" wx:if="{{address.is_default==1}}"> [默认]</text>
            {{address.info.detail}}
          </view>
        </view>
        <view class="arrow">&gt;</view>
      </view>
    </view>

    <view class="spacing"></view>
    <view class="order_info">
      <view class="block">
        <view class="left">买家留言:</view>
        <view class="right input_box">
          <input bindinput="bindKeyInput" placeholder="对本次交易的说明" />
        </view>
      </view>
      
      <view class="spacing"></view>
      <view class="block">
        <view class="left tongji">商品金额</view>
        <view class="right price">￥{{totalPrice}}</view>
      </view>
    </view>
    <view class="pay_box">
      <form report-submit bindsubmit="goPay" >
        <button form-type="submit" class="button type_green">提交订单</button>
      </form>
    </view>
  </view>
</template>
<script>
import wepy from "wepy";
import api from "../api/api";
import tip from "../utils/tip";
import {
  SYSTEM_INFO,
  USER_SPECICAL_INFO,
  ADDRESS_ID,
  SHOPPING_CART,
  ADDRESS
} from "../utils/constant";
export default class ComfireOrder extends wepy.page {
  config = {
    navigationBarTitleText: "确认订单"
  };

  data = {
    //卖家留言
    sellerMessage: "",
    //是否存在默认地址
    is_exit_address: false,
    address: {},
    //总价
    totalPrice: 0,
    operating: false
  };

  //获取订单总价格
  async getOrderTotalPrice() {
    let that = this;
    let shopping_cart = wx.getStorageSync(SHOPPING_CART) || [];
    if (shopping_cart.length > 0) {
      for (var i = 0; i < shopping_cart.length; i++) {
        that.totalPrice += shopping_cart[i].num * shopping_cart[i].price;
      }
    } else {
      tip.error("计算价格失败");
    }
    this.$apply();
  }

  async getAddressInfo(addr, id) {
    this.is_exit_address = true;
    this.address = addr[id];
  }

  onLoad(option) {
    let that = this;

    this.operating = false;
    that.goodsId = option.goodsId == undefined ? "" : option.goodsId;
    this.purchaseType =
      option.purchasetype == undefined ? "1" : option.purchasetype;
    that.getOrderTotalPrice();
    let from = option.from == undefined ? "" : option.from;

    let addr = wx.getStorageSync(ADDRESS) || [];
    if (addr.length > 0) {
      for (var i = 0; i < addr.length; i++) {
        if (addr[i].is_default == true) {
          that.is_exit_address = true;
          that.address = addr[i];
          break;
        }
      }
      if (from == "selAdd") {
        this.getAddressInfo(addr, wepy.getStorageSync(ADDRESS_ID));
      }
    }
  }
  computed = {};

  async goToPay(formId) {
    //测试调用接口用，可注释
    tip.loading("提交订单中");
    let userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {};
    let openId = userSpecialInfo.openid;
    const json = await api.saveByCart({
      query: {
        openId: openId,
        receiverInfoId: this.address.id,
        businessMessage: this.sellerMessage,
        formId: formId,
        reduceScore: this.jf_num
      }
    });

    if (json.data.code == 0) {
      //补货直接提交到后台去审核
      if (this.purchaseType == 2) {
        //补货
        tip.success("已提交补货申请!");
        setTimeout(() => {
          tip.loaded();
          wepy.navigateTo({
            url: "/pages/reorder"
          });
        }, 2000);
        return;
      }
      //保存成功了后进行微信支付
      const pay = await api.toPay({
        query: {
          openId: openId,
          orderNo: json.data.tradeNo
        }
      });
      if (pay.data.code == 0) {
        //以下是微信支付
        wx.requestPayment({
          appId: pay.data.appId,
          timeStamp: pay.data.timeStamp,
          nonceStr: pay.data.nonceStr,
          package: pay.data.package,
          signType: "MD5",
          paySign: pay.data.paySign,
          success: function(res) {
            console.log("pay", res);
            setTimeout(() => {
              //支付成功 关闭loadding 跳转到支付成功页面
              tip.loaded();
              wepy.navigateTo({
                url: "/pages/pay_success?orderNo=" + json.data.tradeNo
              });
            }, 2000);
          },
          fail: function(res) {
            tip.alert("支付失败");
            setTimeout(() => {
              //支付成功 关闭loadding 跳转到支付成功页面
              tip.loaded();
              wepy.navigateTo({
                url: "/pages/order"
              });
            }, 2000);
          }
        });
      } else {
        tip.alert("支付失败");
        setTimeout(() => {
          //支付成功 关闭loadding 跳转到支付成功页面
          tip.loaded();
          wepy.navigateTo({
            url: "/pages/order"
          });
        }, 2000);
      }
    } else {
      tip.error(json.data.msg);
    }
  }

  methods = {
    handleDelItem(itemData) {
      this.deleteGoods(itemData);
    },
    bindKeyInput(e) {
      this.sellerMessage = e.detail.value;
    },
    async goPay(e) {
      var that = this;
      var fId = e.detail.formId;
      await tip.confirm("请确保您的手机号是正确的,稍候您会收到订单短信");
      if (!this.is_exit_address) {
        await tip.confirm("你未设置收货地址，请设置地址");
        wepy.navigateTo({
          url: "/pages/address?type=order"
        });
        return false;
      }
      //this.goToPay(fId);
      var shop_cart = wx.getStorageSync(SHOPPING_CART);
      const json = await api.notice({
        method: "POST",
        query: {
          shop_cart: shop_cart,
          address: that.address,
          seller_message: that.sellerMessage,
          total_price: that.totalPrice
        }
      });
      //const json = {data:{code:0,msg:'订单提交成功'}};
      if (json.data.code == 0) {
        //提交成功
        wx.removeStorageSync(SHOPPING_CART);
        tip.success(json.data.msg, 1000);
        wx.switchTab({
          url: "shop_cart"
        });
      } else {
        tip.error(json.data.error);
      }
    },
    setAddress() {
      wepy.navigateTo({
        url: "/pages/address?type=order"
      });
    }
  };
  events = {};
}
</script>
<style lang="less">
.address {
  border-top: 1px solid #efefef;
  background: #fff;
  .empty_address,
  .address_info {
    display: flex;
    justify-content: space-between;
    height: 103rpx;
    align-items: center;
    padding: 0rpx 35rpx;
    .title {
      color: #000;
    }
    .arrow {
      color: #9a9a9a;
    }
    .user_info {
      color: #1a1a1a;
    }
    .active_address {
      margin-top: 20rpx;
    }
    .defult {
      color: #ea4a3a;
    }
  }
  .address_info {
    height: 150rpx;
  }
}

.order_info {
  .block {
    display: flex;
    justify-content: space-between;
    height: 91rpx;
    align-items: center;
    padding: 0rpx 35rpx;
    border-bottom: 1px solid #efefef;
    background: #fff;
    .txt {
      font-size: 32rpx;
    }
    .left {
      color: #000;
    }
    .right {
      color: #9a9a9a;
      text-align: right;
    }
    .price {
      color: #ea4a3a;
      font-size: 32rpx;
    }
    .tongji {
      font-size: 32rpx;
    }
    .input_box {
      flex: 1;
      margin-left: 20rpx;
    }
    .total_jf {
      font-size: 32rpx;
    }
  }
}
.list_box {
  height: 250rpx;
}

.goods-info {
  border-bottom: 1px solid #eee;
  display: flex;
  padding: 20rpx;
  box-sizing: border-box;
  position: relative;
  background: #fff;
}

.goods-info .img-box {
  width: 160rpx;
  height: 160rpx;
  overflow: hidden;
  margin-right: 28rpx;
  background-color: #d8d8d8;
}

.goods-info .text-box {
  width: 480rpx;
}

.goods-info .text-box .goods-title {
  font-size: 32rpx;
  color: #414141;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  padding: 10rpx 20rpx 5rpx 0;
}

.goods-info .text-box .goods-label {
  font-size: 26rpx;
  color: #999;
  height: 38rpx;
  line-height: 38rpx;
  margin: 8rpx 0 25rpx 0;
}

.goods-info .text-box .goods-price {
  font-size: 34rpx;
  color: #e64340;
}

.goods-info .text-box .buy-num {
  width: 164rpx;
  height: 48rpx;
  line-height: 48rpx;
  position: absolute;
  right: 30rpx;
  bottom: 30rpx;
  display: flex;
  font-size: 24rpx;
  text-align: center;
}

.goods-info .text-box .buy-num .jian-btn {
  width: 48rpx;
  height: 100%;
  border-left: 1rpx solid #ccc;
  border-bottom: 1rpx solid #ccc;
  border-top: 1rpx solid #ccc;
  border-bottom-left-radius: 6rpx;
  border-top-left-radius: 6rpx;
}

.goods-info .text-box .buy-num .jian-btn.disabled {
  background-color: #f5f5f9;
  border-left: 1rpx solid #eee;
  border-bottom: 1rpx solid #eee;
  border-top: 1rpx solid #eee;
  color: #ccc;
}

.goods-info .text-box .buy-num .jia-btn {
  width: 48rpx;
  height: 100%;
  border-right: 1rpx solid #ccc;
  border-bottom: 1rpx solid #ccc;
  border-top: 1rpx solid #ccc;
  border-bottom-right-radius: 6rpx;
  border-top-right-radius: 6rpx;
}

.goods-info .text-box .buy-num .jia-btn.disabled {
  background-color: #f5f5f9;
  border-right: 1rpx solid #eee;
  border-bottom: 1rpx solid #eee;
  border-top: 1rpx solid #eee;
  color: #ccc;
}

.goods-info .text-box .buy-num input {
  width: 68rpx;
  height: 48rpx;
  min-height: 48rpx;
  text-align: center;
  font-size: 24rpx;
  border: 1rpx solid #ccc;
}

.goods-info .img-box .img {
  width: 160rpx;
  height: 160rpx;
}

.pay_box {
  margin-top: 104rpx;
  padding: 0 22rpx;
}
.dk-jf {
  text-align: right;
  color: #666;
}
</style>
